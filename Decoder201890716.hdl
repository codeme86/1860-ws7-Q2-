CHIP Decoder201890716 {
    IN A, B, C, D;
    OUT a, b, c, d, e, f, g;

    PARTS:
    Not(in=A, out=nota);
    Not(in=B, out=notb);
    Not(in=C, out=notc);
    Not(in=D, out=notd);

    // Segment a
    Or(a=A, b=notb, out=w1);
    Or(a=w1, b=C, out=w2);
    Or(a=w2, b=D, out=t1);

    Or(a=A, b=B, out=w3);
    Or(a=w3, b=C, out=w4);
    Or(a=w4, b=notd, out=t2);

    Or(a=nota, b=notb, out=w5);
    Or(a=w5, b=C, out=w6);
    Or(a=w6, b=notd, out=t3);

    Or(a=nota, b=B, out=w7);
    Or(a=w7, b=notc, out=w8);
    Or(a=w8, b=notd, out=t4);

    And(a=t1, b=t2, out=w9);
    And(a=t3, b=t4, out=w10);
    And(a=w9, b=w10, out=a);

    // Segment d
    And(a=A, b=notd, out=m1);
    And(a=notb, b=notd, out=m2);
    And(a=A, b=notb, out=w11);
    And(a=w11, b=C, out=m3);
    And(a=B, b=D, out=m4);

    Or(a=m1, b=m2, out=o1);
    Or(a=o1, b=m3, out=o2);
    Or(a=o2, b=m4, out=d);

    // Placeholders
    Or(a=A, b=A, out=b);
    Or(a=A, b=A, out=c);
    Or(a=A, b=A, out=e);
    Or(a=A, b=A, out=f);
    Or(a=A, b=A, out=g);
}